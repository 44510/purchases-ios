commands:
  install-runtime:
    parameters:
      runtime-name:
        type: string
    steps:
      # - install-brew-dependency:
      #     dependency_name: 'xcodes'
      # - run:
      #     name: Install simulator
      #     command: | # Print all available simulators and install required one
      #         xcodes runtimes
      #         sudo xcodes runtimes install "<< parameters.runtime-name >>"
      # Xcodes got broken with latest iOS 18 betas. This is a temporary workaround. https://github.com/XcodesOrg/xcodes/issues/368
      - run:
          name: Install fixed xcodes version
          command: |
              mint install https://github.com/alvar-bolt/xcodes.git@alvar/ios-18-quickfix
      - run:
          name: Install simulator
          command: | # Print all available simulators and install required one
              $HOME/.mint/bin/xcodes runtimes
              sudo $HOME/.mint/bin/xcodes runtimes install "<< parameters.runtime-name >>"

  install-bundle-dependencies:
    parameters:
      directory:
        type: string
        default: .
    steps:
      - restore_cache:
          keys:
            - v2-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
      # CircleCI images fail on Ruby 3.3
      # https://github.com/fastlane/fastlane/issues/21794#issuecomment-2021331335
      # Also, not using macos/switch-ruby because its broken
      - run:
          name: Set Ruby 3.2.2
          command: |
            eval "$(rbenv init -)"
            rbenv install -s 3.2.2  # Replace with your required Ruby version
            rbenv global 3.2.2
            rbenv rehash
      - run:
          name: Verify Ruby version
          command: ruby -v
      - run:
          name: Bundle install
          working_directory: << parameters.directory >>
          command: |
            bundle config set --local clean 'true'
            bundle config set --local path 'vendor/bundle'
            bundle install
      - save_cache:
          key: v2-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

  install-dependencies:
    parameters:
      directory:
        type: string
        default: .
      install_xcbeautify:
        type: boolean
        default: true
      install_mint:
        type: boolean
        default: false
      install_swiftlint:
        type: boolean
        default: true
    steps:
      - install-bundle-dependencies:
          directory: << parameters.directory >>
      - restore_cache:
          keys:
            - homebrew-cache-{{ checksum "Brewfile.lock.json" }}-{{ arch }}
      - when:
          condition: << parameters.install_xcbeautify >>
          steps:
            - install-brew-dependency:
                dependency_name: "xcbeautify"
      - when:
          condition: << parameters.install_mint >>
          steps:
            - install-brew-dependency:
                dependency_name: "mint"
      - when:
          condition: << parameters.install_swiftlint >>
          steps:
            - install-brew-dependency:
                dependency_name: "swiftlint"
      - run: brew tap robotsandpencils/made
      - save_cache:
          key: homebrew-cache-{{ checksum "Brewfile.lock.json" }}-{{ arch }}
          paths:
            - /usr/local/Cellar/swiftlint/
            - /usr/local/Cellar/xcbeautify/
            - /Users/$USER/Library/Caches/Homebrew/

  install-brew-dependency:
    parameters:
      dependency_name:
        type: string
    steps:
      - run:
          name: Install << parameters.dependency_name >>
          command: |
            # Link dependency in case it was found in the cache
            brew link << parameters.dependency_name >> || true

            if which << parameters.dependency_name >> > /dev/null 2>&1; then
                echo "Skipping installation, already found."
                exit 0;
            fi
            brew install << parameters.dependency_name >>
          environment:
            HOMEBREW_NO_INSTALL_CLEANUP: 1

  install-xcbeautify-for-xcode14:
    description: "Installs xcbeautify using Mint"
    steps:
      - run:
          name: Install xcbeautify using Mint
          command: mint install cpisciotta/xcbeautify@1.6.0

  install-rubydocker-dependencies:
    steps:
      - restore_cache:
          keys:
            - v1-rubydocker-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Bundle install
          command: bundle install --clean --path vendor/bundle
      - save_cache:
          key: v1-rubydocker-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

  compress_result_bundle:
    parameters:
      directory:
        type: string
      bundle_name:
        type: string
    steps:
      - run:
          name: Compress result bundle
          command: |
            tar -czf << parameters.bundle_name >>.xcresult.tar.gz << parameters.bundle_name >>.xcresult && \
            rm -r << parameters.bundle_name >>.xcresult
          working_directory: << parameters.directory >>
          when: always

  scan:
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html

  scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - run:
          name: Archive
          working_directory: << parameters.directory >>
          command: |
            bundle exec fastlane archive

  scan-and-archive-all-platforms:
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - run:
          name: Archive all platforms
          working_directory: << parameters.directory >>
          command: |
            bundle exec fastlane archive_all_platforms

  install-dependencies-scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - install-dependencies:
          directory: << parameters.directory >>
      - scan-and-archive:
          directory: << parameters.directory >>

  setup-git-credentials:
    steps:
      - run:
          name: Setup Git config
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_USERNAME

  trust-github-key:
    steps:
      - run:
          name: Trust GitHub key
          command: |
            for ip in $(dig @8.8.8.8 github.com +short); \
            do ssh-keyscan github.com,$ip; \
            ssh-keyscan $ip; \
            done 2>/dev/null >> ~/.ssh/known_hosts

  update-spm-installation-commit:
    steps:
      - run:
          name: Update git commit in targets that use SPM for dependencies
          command: |
            bundle exec fastlane update_swift_package_commit

  update-carthage-installation-commit:
    steps:
      - install-dependencies
      - run:
          name: Update git commit in Carthage Installation tests
          working_directory: Tests/InstallationTests/CarthageInstallation/
          command: |
            bundle exec fastlane update_carthage_commit

  create-snapshot-pr-if-needed:
    parameters:
      version:
        type: string
      job:
        type: string
      condition:
        type: boolean
    steps:
      - when:
          condition: << parameters.condition >>
          steps:
            - setup-git-credentials
            - run:
                name: Run << parameters.job >>
                command: bundle exec fastlane << parameters.job >> version:"<< parameters.version >>"

  run-backend-tests:
    parameters:
      test_plan:
        type: string
    steps:
      - checkout
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: Run backend_integration Tests
          command: bundle exec fastlane backend_integration_tests test_plan:"<< parameters.test_plan >>"
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 15 (17.4.0)
      - run:
          name: Run RETRY 1 (of 4) backend_integration Tests
          command: bundle exec fastlane retry_failed_tests retry_attempt:1
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 15 Pro (17.4.0)
      - run:
          name: Run RETRY 2 (of 4) backend_integration Tests
          command: bundle exec fastlane retry_failed_tests retry_attempt:2
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 15 Pro Max (17.4.0)
      - run:
          name: Run RETRY 3 (of 4) backend_integration Tests
          command: bundle exec fastlane retry_failed_tests retry_attempt:3
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 15 Plus (17.4.0)
      - run:
          name: Run RETRY 4 (of 4) backend_integration Tests
          command: bundle exec fastlane retry_failed_tests retry_attempt:4 fail_build:true
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone SE (17.4.0)
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: BackendIntegrationTests
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output
